{
  "enabled": true,
  "name": "Intelligent Test Generator",
  "description": "Analyzes new game features and automatically suggests comprehensive test scenarios, including edge cases specific to Reddit Devvit platform and mobile gaming contexts",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/server/core/ebbflow.ts",
      "src/client/hooks/useEbbFlow.ts",
      "src/client/components/*.tsx",
      "src/shared/types/api.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "New game functionality has been implemented. Analyze the changes and suggest comprehensive test scenarios that cover:\n\n1. **Core Game Logic Testing:**\n   - Unit tests for game state management\n   - Physics simulation accuracy tests\n   - Collision detection edge cases\n   - Score calculation validation\n   - Timer and countdown functionality\n\n2. **Reddit Platform Integration Tests:**\n   - User authentication edge cases (anonymous vs logged-in)\n   - Post creation and splash screen functionality\n   - Subreddit context handling\n   - Rate limiting and daily game restrictions\n   - Redis data persistence and retrieval\n\n3. **Mobile and Cross-Platform Tests:**\n   - Touch input accuracy across different screen sizes\n   - Performance under various device capabilities\n   - Network connectivity edge cases\n   - Battery optimization impact\n   - Orientation change handling\n\n4. **Community Features Testing:**\n   - Leaderboard accuracy and updates\n   - Community goal progress tracking\n   - Concurrent user scenarios\n   - Data consistency across multiple players\n   - Seasonal progression mechanics\n\n5. **Error Handling and Edge Cases:**\n   - Network failure recovery\n   - Invalid user input handling\n   - Game state corruption recovery\n   - Resource loading failures\n   - Concurrent modification conflicts\n\n6. **Performance and Load Testing:**\n   - Memory leak detection during extended play\n   - Frame rate consistency under load\n   - Server response time under concurrent users\n   - Asset loading optimization\n\nFor each test scenario, provide:\n- Clear test description and expected behavior\n- Specific edge cases to consider\n- Mock data or setup requirements\n- Success/failure criteria\n- Integration with existing test framework\n\nPrioritize tests that cover the most critical user journeys and potential failure points. Consider both automated unit tests and manual testing scenarios for complex user interactions."
  }
}